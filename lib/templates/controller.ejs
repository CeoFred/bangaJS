const <%= $name.toPascalCase() %>Serv = require("./../services/<%= $name.toKebabCase() %>.service");
const response = require("./../utils/response");

class <%= $name.toPascalCase() %>Contoller {
  async create(req, res) {
    const result = await <%= $name.toPascalCase() %>Serv.create(req.body);
    res.status(200).send(response("<%= $name.toSentenceCase() %> created", result));
  }

  async getAll(req, res) {
    const result = await <%= $name.toPascalCase() %>Serv.getAll();
    res.status(200).send(response("All <%= $name.toSentenceCase() %>s", result));
  }

  async getOne(req, res) {
    const result = await <%= $name.toPascalCase() %>Serv.getOne(req.params.<%= $name.toCamelCase() %>Id);
    res.status(200).send(response("<%= $name.toSentenceCase() %> data", result));
  }

  async update(req, res) {
    const result = await <%= $name.toPascalCase() %>Serv.update(req.params.<%= $name.toCamelCase() %>Id, req.body);
    res.status(200).send(response("<%= $name.toSentenceCase() %> updated", result));
  }

  async delete(req, res) {
    const result = await <%= $name.toPascalCase() %>Serv.delete(req.params.<%= $name.toCamelCase() %>Id);
    res.status(200).send(response("<%= $name.toSentenceCase() %> deleted", result));
  }
}

module.exports = new <%= $name.toPascalCase() %>Contoller();
