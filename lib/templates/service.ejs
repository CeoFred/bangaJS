const <%= $name.toPascalCase() %> = require("./../models/<%= $name.toKebabCase() %>.model");
const CustomError = require("./../utils/custom-error");

class <%= $name.toPascalCase() %>Service {
  async create(data) {
    return await new <%= $name.toPascalCase() %>(data).save();
  }

  async getAll() {
    return await <%= $name.toPascalCase() %>.find({});
  }

  async getOne(<%= $name.toCamelCase() %>Id) {
    const <%= $name.toCamelCase() %> = await <%= $name.toPascalCase() %>.findOne({ _id: <%= $name.toCamelCase() %>Id });
    if (!<%= $name.toCamelCase() %>) throw new CustomError("<%= $name.toPascalCase() %> does not exists");

    return <%= $name.toCamelCase() %>
  }

  async update(<%= $name.toCamelCase() %>Id, data) {
    const <%= $name.toCamelCase() %> = await <%= $name.toPascalCase() %>.findByIdAndUpdate(
      { _id: <%= $name.toCamelCase() %>Id },
      { $set: data },
      { new: true }
    );

    if (!<%= $name.toCamelCase() %>) throw new CustomError("<%= $name.toPascalCase() %> dosen't exist", 404);

    return <%= $name.toCamelCase() %>;
  }

  async delete(<%= $name.toCamelCase() %>Id) {
    const <%= $name.toCamelCase() %> = await <%= $name.toPascalCase() %>.findOne({ _id: <%= $name.toCamelCase() %>Id });
    <%= $name.toCamelCase() %>.remove()
    return <%= $name.toCamelCase() %>
  }
}

module.exports = new <%= $name.toPascalCase() %>Service();